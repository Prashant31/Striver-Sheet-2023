class Solution {
public:
int cnt=0;
void merge(int low,int mid,int high,vector<int> &arr){
int left=low;
int right=mid+1;
vector<int> temp;
while(left<=mid and right<=high){
if(arr[left]<=arr[right]){
    temp.push_back(arr[left]);
    left++;
}
else{
    temp.push_back(arr[right]);
    right++;
}
}
while(left<=mid){
    temp.push_back(arr[left++]);
}
while(right<=high){
    temp.push_back(arr[right++]);

}

for(int i=low;i<=high;i++){
    arr[i]=temp[i-low];
}


}

int countPairs(vector<int> &arr,int low,int mid,int high){
    int cnt=0;
    int right=mid+1;
    for(int i=low;i<=mid;i++){
        while(right<=high and arr[i]>2*(long long)arr[right]){
            right++;
        }
        cnt+=(right-(mid+1));
    }
    return cnt;
}

int mergeSort(vector<int> &arr,int low,int high){
    int cnt=0;
    if(low>=high) return cnt ;
    int mid=(low+high)/2;
    cnt+=mergeSort(arr,low,mid);
    cnt+=mergeSort(arr,mid+1,high);
    cnt+=countPairs(arr,low,mid,high);
    merge(low,mid,high,arr);
    return cnt;
   
}

    int reversePairs(vector<int>& arr) {
       int ans=mergeSort(arr,0,arr.size()-1);
       return ans;
    }
};
